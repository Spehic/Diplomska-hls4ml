// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config12_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_blk_n,
        res_V_data_1_V_blk_n,
        res_V_data_2_V_blk_n,
        res_V_data_3_V_blk_n,
        res_V_data_4_V_blk_n,
        res_V_data_5_V_blk_n,
        res_V_data_6_V_blk_n,
        res_V_data_7_V_blk_n,
        res_V_data_8_V_blk_n,
        res_V_data_9_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 10'd1;
parameter    ap_ST_fsm_pp0_stage1 = 10'd2;
parameter    ap_ST_fsm_pp0_stage2 = 10'd4;
parameter    ap_ST_fsm_pp0_stage3 = 10'd8;
parameter    ap_ST_fsm_pp0_stage4 = 10'd16;
parameter    ap_ST_fsm_pp0_stage5 = 10'd32;
parameter    ap_ST_fsm_pp0_stage6 = 10'd64;
parameter    ap_ST_fsm_pp0_stage7 = 10'd128;
parameter    ap_ST_fsm_pp0_stage8 = 10'd256;
parameter    ap_ST_fsm_pp0_stage9 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [13:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [13:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [13:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [13:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [13:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [13:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [13:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [13:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [13:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_blk_n;
output   res_V_data_1_V_blk_n;
output   res_V_data_2_V_blk_n;
output   res_V_data_3_V_blk_n;
output   res_V_data_4_V_blk_n;
output   res_V_data_5_V_blk_n;
output   res_V_data_6_V_blk_n;
output   res_V_data_7_V_blk_n;
output   res_V_data_8_V_blk_n;
output   res_V_data_9_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_blk_n;
reg res_V_data_1_V_blk_n;
reg res_V_data_2_V_blk_n;
reg res_V_data_3_V_blk_n;
reg res_V_data_4_V_blk_n;
reg res_V_data_5_V_blk_n;
reg res_V_data_6_V_blk_n;
reg res_V_data_7_V_blk_n;
reg res_V_data_8_V_blk_n;
reg res_V_data_9_V_blk_n;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state20_pp0_stage9_iter1;
wire    ap_block_state30_pp0_stage9_iter2;
wire    ap_block_pp0_stage9_11001;
reg   [9:0] exp_table3_address0;
reg    exp_table3_ce0;
wire   [16:0] exp_table3_q0;
wire   [9:0] invert_table4_address0;
reg    invert_table4_ce0;
wire   [17:0] invert_table4_q0;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    io_acc_block_signal_op50;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state21_pp0_stage0_iter2;
wire    ap_block_state31_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg  signed [13:0] data_array_0_V_reg_1829;
reg  signed [13:0] data_array_1_V_reg_1836;
reg  signed [13:0] data_array_2_V_reg_1843;
reg  signed [13:0] data_array_3_V_reg_1850;
reg  signed [13:0] data_array_4_V_reg_1857;
reg  signed [13:0] data_array_5_V_reg_1864;
reg  signed [13:0] data_array_6_V_reg_1871;
reg  signed [13:0] data_array_7_V_reg_1878;
reg  signed [13:0] data_array_8_V_reg_1885;
reg  signed [13:0] data_array_9_V_reg_1892;
wire   [0:0] icmp_ln1496_fu_431_p2;
reg   [0:0] icmp_ln1496_reg_1899;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_state22_pp0_stage1_iter2;
wire    ap_block_state32_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln1496_1_fu_435_p2;
reg   [0:0] icmp_ln1496_1_reg_1904;
wire   [0:0] icmp_ln1496_3_fu_439_p2;
reg   [0:0] icmp_ln1496_3_reg_1909;
wire   [0:0] icmp_ln1496_4_fu_443_p2;
reg   [0:0] icmp_ln1496_4_reg_1914;
wire   [13:0] select_ln66_2_fu_463_p3;
reg   [13:0] select_ln66_2_reg_1919;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_state23_pp0_stage2_iter2;
wire    ap_block_state33_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire   [13:0] select_ln66_5_fu_487_p3;
reg   [13:0] select_ln66_5_reg_1925;
wire   [13:0] select_ln66_6_fu_499_p3;
reg   [13:0] select_ln66_6_reg_1931;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_state24_pp0_stage3_iter2;
wire    ap_block_state34_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
wire   [0:0] icmp_ln1496_7_fu_505_p2;
reg   [0:0] icmp_ln1496_7_reg_1937;
wire   [13:0] x_max_V_fu_519_p3;
reg   [13:0] x_max_V_reg_1942;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_state25_pp0_stage4_iter2;
wire    ap_block_state35_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_11001;
wire   [9:0] y_V_fu_1105_p3;
reg   [9:0] y_V_reg_1947;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_state26_pp0_stage5_iter2;
wire    ap_block_state36_pp0_stage5_iter3;
wire    ap_block_pp0_stage5_11001;
wire   [9:0] y_V_1_fu_1139_p3;
reg   [9:0] y_V_1_reg_1952;
wire   [9:0] y_V_2_fu_1173_p3;
reg   [9:0] y_V_2_reg_1957;
wire   [9:0] y_V_3_fu_1207_p3;
reg   [9:0] y_V_3_reg_1962;
wire   [9:0] y_V_4_fu_1241_p3;
reg   [9:0] y_V_4_reg_1967;
wire   [9:0] y_V_5_fu_1275_p3;
reg   [9:0] y_V_5_reg_1972;
wire   [9:0] y_V_6_fu_1309_p3;
reg   [9:0] y_V_6_reg_1977;
wire   [9:0] y_V_7_fu_1343_p3;
reg   [9:0] y_V_7_reg_1982;
wire   [9:0] y_V_8_fu_1377_p3;
reg   [9:0] y_V_8_reg_1987;
wire   [9:0] y_V_9_fu_1411_p3;
reg   [9:0] y_V_9_reg_1992;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state17_pp0_stage6_iter1;
wire    ap_block_state27_pp0_stage6_iter2;
wire    ap_block_state37_pp0_stage6_iter3;
wire    ap_block_pp0_stage6_11001;
reg   [16:0] exp_res_0_V_1_reg_2002;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state18_pp0_stage7_iter1;
wire    ap_block_state28_pp0_stage7_iter2;
wire    ap_block_state38_pp0_stage7_iter3;
wire    ap_block_pp0_stage7_11001;
reg   [16:0] exp_res_0_V_1_reg_2002_pp0_iter1_reg;
reg   [16:0] exp_res_1_V_1_reg_2013;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state19_pp0_stage8_iter1;
wire    ap_block_state29_pp0_stage8_iter2;
wire    io_acc_block_signal_op400;
reg    ap_block_state39_pp0_stage8_iter3;
reg    ap_block_pp0_stage8_11001;
reg   [16:0] exp_res_1_V_1_reg_2013_pp0_iter1_reg;
reg   [16:0] exp_res_2_V_1_reg_2024;
reg   [16:0] exp_res_2_V_1_reg_2024_pp0_iter1_reg;
reg   [16:0] exp_res_3_V_1_reg_2035;
reg   [16:0] exp_res_3_V_1_reg_2035_pp0_iter2_reg;
reg   [16:0] exp_res_4_V_1_reg_2046;
reg   [16:0] exp_res_4_V_1_reg_2046_pp0_iter2_reg;
reg   [16:0] exp_res_5_V_1_reg_2057;
reg   [16:0] exp_res_5_V_1_reg_2057_pp0_iter2_reg;
reg   [16:0] exp_res_6_V_1_reg_2068;
reg   [16:0] exp_res_6_V_1_reg_2068_pp0_iter2_reg;
reg   [16:0] exp_res_7_V_1_reg_2078;
reg   [16:0] exp_res_7_V_1_reg_2078_pp0_iter2_reg;
reg   [16:0] exp_res_8_V_1_reg_2088;
reg   [16:0] exp_res_8_V_1_reg_2088_pp0_iter2_reg;
reg   [16:0] exp_res_9_V_1_reg_2100;
reg   [16:0] exp_res_9_V_1_reg_2100_pp0_iter2_reg;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_return;
reg  signed [17:0] p_Val2_19_reg_2107;
reg  signed [17:0] p_Val2_1_reg_2113;
wire  signed [17:0] p_Val2_26_fu_1581_p3;
reg  signed [17:0] p_Val2_26_reg_2119;
wire   [16:0] p_Val2_27_fu_1613_p3;
reg   [16:0] p_Val2_27_reg_2125;
wire   [9:0] y_V_10_fu_1713_p3;
reg   [9:0] y_V_10_reg_2131;
reg   [17:0] inv_exp_sum_V_reg_2141;
wire  signed [25:0] sext_ln241_fu_1725_p1;
reg  signed [25:0] sext_ln241_reg_2146;
wire   [25:0] zext_ln1118_fu_1729_p1;
reg   [15:0] tmp_data_0_V_reg_2156;
wire   [25:0] zext_ln1118_1_fu_1733_p1;
reg   [15:0] tmp_data_1_V_reg_2166;
wire   [25:0] zext_ln1118_2_fu_1737_p1;
reg   [15:0] tmp_data_2_V_reg_2176;
wire   [25:0] zext_ln1118_3_fu_1741_p1;
reg   [15:0] tmp_data_3_V_reg_2186;
wire   [25:0] zext_ln1118_4_fu_1745_p1;
reg   [15:0] tmp_data_4_V_reg_2196;
wire   [25:0] zext_ln1118_5_fu_1749_p1;
reg   [15:0] tmp_data_5_V_reg_2206;
wire   [25:0] zext_ln1118_6_fu_1753_p1;
reg   [15:0] tmp_data_6_V_reg_2216;
wire   [25:0] zext_ln1118_7_fu_1757_p1;
reg   [15:0] tmp_data_7_V_reg_2226;
wire   [25:0] zext_ln1118_8_fu_1761_p1;
reg   [15:0] tmp_data_8_V_reg_2236;
wire   [25:0] zext_ln1118_9_fu_1765_p1;
reg   [15:0] tmp_data_9_V_reg_2246;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage8_subdone;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_done;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_idle;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_ready;
reg   [4:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_x_V_offset;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_ce;
wire    ap_block_state8_pp0_stage7_iter0_ignore_call233;
wire    ap_block_state18_pp0_stage7_iter1_ignore_call233;
wire    ap_block_state28_pp0_stage7_iter2_ignore_call233;
wire    ap_block_state38_pp0_stage7_iter3_ignore_call233;
wire    ap_block_pp0_stage7_11001_ignoreCallOp260;
wire    ap_block_state9_pp0_stage8_iter0_ignore_call233;
wire    ap_block_state19_pp0_stage8_iter1_ignore_call233;
wire    ap_block_state29_pp0_stage8_iter2_ignore_call233;
reg    ap_block_state39_pp0_stage8_iter3_ignore_call233;
reg    ap_block_pp0_stage8_11001_ignoreCallOp261;
wire    ap_block_state10_pp0_stage9_iter0_ignore_call233;
wire    ap_block_state20_pp0_stage9_iter1_ignore_call233;
wire    ap_block_state30_pp0_stage9_iter2_ignore_call233;
wire    ap_block_pp0_stage9_11001_ignoreCallOp262;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call234;
wire    ap_block_state11_pp0_stage0_iter1_ignore_call234;
wire    ap_block_state21_pp0_stage0_iter2_ignore_call234;
wire    ap_block_state31_pp0_stage0_iter3_ignore_call234;
reg    ap_block_pp0_stage0_11001_ignoreCallOp263;
wire    ap_block_state2_pp0_stage1_iter0_ignore_call234;
wire    ap_block_state12_pp0_stage1_iter1_ignore_call234;
wire    ap_block_state22_pp0_stage1_iter2_ignore_call234;
wire    ap_block_state32_pp0_stage1_iter3_ignore_call234;
wire    ap_block_pp0_stage1_11001_ignoreCallOp264;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call234;
wire    ap_block_state13_pp0_stage2_iter1_ignore_call234;
wire    ap_block_state23_pp0_stage2_iter2_ignore_call234;
wire    ap_block_state33_pp0_stage2_iter3_ignore_call234;
wire    ap_block_pp0_stage2_11001_ignoreCallOp265;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start_reg;
reg   [16:0] exp_res_0_V_fu_130;
wire    ap_block_pp0_stage7;
reg   [16:0] exp_res_1_V_fu_134;
reg   [16:0] exp_res_2_V_fu_138;
reg   [16:0] exp_res_3_V_fu_142;
reg   [16:0] exp_res_4_V_fu_146;
reg   [16:0] exp_res_5_V_fu_150;
reg   [16:0] exp_res_6_V_fu_154;
reg   [16:0] exp_res_7_V_fu_158;
reg   [16:0] exp_res_8_V_fu_162;
reg   [16:0] exp_res_9_V_fu_166;
wire   [63:0] zext_ln225_fu_1419_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln225_1_fu_1423_p1;
wire   [63:0] zext_ln225_2_fu_1427_p1;
wire   [63:0] zext_ln225_3_fu_1431_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln225_4_fu_1435_p1;
wire   [63:0] zext_ln225_5_fu_1439_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln225_6_fu_1443_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln225_7_fu_1476_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln225_8_fu_1485_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln225_9_fu_1494_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln235_fu_1721_p1;
reg    ap_block_pp0_stage8_01001;
reg   [16:0] grp_fu_326_p0;
reg  signed [17:0] grp_fu_326_p1;
wire   [25:0] grp_fu_326_p2;
wire   [13:0] select_ln66_fu_447_p3;
wire   [13:0] select_ln66_1_fu_452_p3;
wire   [0:0] icmp_ln1496_2_fu_457_p2;
wire   [13:0] select_ln66_3_fu_471_p3;
wire   [13:0] select_ln66_4_fu_476_p3;
wire   [0:0] icmp_ln1496_5_fu_481_p2;
wire   [0:0] icmp_ln1496_6_fu_495_p2;
wire   [13:0] select_ln66_7_fu_509_p3;
wire   [0:0] icmp_ln1496_8_fu_514_p2;
wire  signed [14:0] sext_ln703_fu_526_p1;
wire  signed [14:0] sext_ln703_1_fu_529_p1;
wire   [14:0] sub_ln1193_fu_532_p2;
wire   [0:0] tmp_22_fu_546_p3;
wire   [0:0] tmp_21_fu_538_p3;
wire   [0:0] xor_ln786_fu_554_p2;
wire   [0:0] xor_ln340_fu_572_p2;
wire  signed [14:0] sext_ln703_2_fu_584_p1;
wire   [14:0] sub_ln1193_1_fu_587_p2;
wire   [0:0] tmp_24_fu_601_p3;
wire   [0:0] tmp_23_fu_593_p3;
wire   [0:0] xor_ln786_1_fu_609_p2;
wire   [0:0] xor_ln340_1_fu_627_p2;
wire  signed [14:0] sext_ln703_3_fu_639_p1;
wire   [14:0] sub_ln1193_2_fu_642_p2;
wire   [0:0] tmp_26_fu_656_p3;
wire   [0:0] tmp_25_fu_648_p3;
wire   [0:0] xor_ln786_2_fu_664_p2;
wire   [0:0] xor_ln340_2_fu_682_p2;
wire  signed [14:0] sext_ln703_4_fu_694_p1;
wire   [14:0] sub_ln1193_3_fu_697_p2;
wire   [0:0] tmp_28_fu_711_p3;
wire   [0:0] tmp_27_fu_703_p3;
wire   [0:0] xor_ln786_3_fu_719_p2;
wire   [0:0] xor_ln340_3_fu_737_p2;
wire  signed [14:0] sext_ln703_5_fu_749_p1;
wire   [14:0] sub_ln1193_4_fu_752_p2;
wire   [0:0] tmp_30_fu_766_p3;
wire   [0:0] tmp_29_fu_758_p3;
wire   [0:0] xor_ln786_4_fu_774_p2;
wire   [0:0] xor_ln340_4_fu_792_p2;
wire  signed [14:0] sext_ln703_6_fu_804_p1;
wire   [14:0] sub_ln1193_5_fu_807_p2;
wire   [0:0] tmp_32_fu_821_p3;
wire   [0:0] tmp_31_fu_813_p3;
wire   [0:0] xor_ln786_5_fu_829_p2;
wire   [0:0] xor_ln340_5_fu_847_p2;
wire  signed [14:0] sext_ln703_7_fu_859_p1;
wire   [14:0] sub_ln1193_6_fu_862_p2;
wire   [0:0] tmp_34_fu_876_p3;
wire   [0:0] tmp_33_fu_868_p3;
wire   [0:0] xor_ln786_6_fu_884_p2;
wire   [0:0] xor_ln340_6_fu_902_p2;
wire  signed [14:0] sext_ln703_8_fu_914_p1;
wire   [14:0] sub_ln1193_7_fu_917_p2;
wire   [0:0] tmp_36_fu_931_p3;
wire   [0:0] tmp_35_fu_923_p3;
wire   [0:0] xor_ln786_7_fu_939_p2;
wire   [0:0] xor_ln340_7_fu_957_p2;
wire  signed [14:0] sext_ln703_9_fu_969_p1;
wire   [14:0] sub_ln1193_8_fu_972_p2;
wire   [0:0] tmp_38_fu_986_p3;
wire   [0:0] tmp_37_fu_978_p3;
wire   [0:0] xor_ln786_8_fu_994_p2;
wire   [0:0] xor_ln340_8_fu_1012_p2;
wire  signed [14:0] sext_ln703_10_fu_1024_p1;
wire   [14:0] sub_ln1193_9_fu_1027_p2;
wire   [0:0] tmp_40_fu_1041_p3;
wire   [0:0] tmp_39_fu_1033_p3;
wire   [0:0] xor_ln786_9_fu_1049_p2;
wire   [0:0] xor_ln340_9_fu_1067_p2;
wire   [0:0] xor_ln340_10_fu_566_p2;
wire   [9:0] tmp_fu_1079_p4;
wire   [0:0] and_ln786_fu_560_p2;
wire   [0:0] or_ln340_fu_578_p2;
wire   [9:0] select_ln340_fu_1089_p3;
wire   [9:0] select_ln388_fu_1097_p3;
wire   [0:0] xor_ln340_11_fu_621_p2;
wire   [9:0] tmp_11_fu_1113_p4;
wire   [0:0] and_ln786_1_fu_615_p2;
wire   [0:0] or_ln340_1_fu_633_p2;
wire   [9:0] select_ln340_2_fu_1123_p3;
wire   [9:0] select_ln388_1_fu_1131_p3;
wire   [0:0] xor_ln340_12_fu_676_p2;
wire   [9:0] tmp_12_fu_1147_p4;
wire   [0:0] and_ln786_2_fu_670_p2;
wire   [0:0] or_ln340_2_fu_688_p2;
wire   [9:0] select_ln340_4_fu_1157_p3;
wire   [9:0] select_ln388_2_fu_1165_p3;
wire   [0:0] xor_ln340_13_fu_731_p2;
wire   [9:0] tmp_13_fu_1181_p4;
wire   [0:0] and_ln786_3_fu_725_p2;
wire   [0:0] or_ln340_3_fu_743_p2;
wire   [9:0] select_ln340_6_fu_1191_p3;
wire   [9:0] select_ln388_3_fu_1199_p3;
wire   [0:0] xor_ln340_14_fu_786_p2;
wire   [9:0] tmp_14_fu_1215_p4;
wire   [0:0] and_ln786_4_fu_780_p2;
wire   [0:0] or_ln340_4_fu_798_p2;
wire   [9:0] select_ln340_8_fu_1225_p3;
wire   [9:0] select_ln388_4_fu_1233_p3;
wire   [0:0] xor_ln340_15_fu_841_p2;
wire   [9:0] tmp_15_fu_1249_p4;
wire   [0:0] and_ln786_5_fu_835_p2;
wire   [0:0] or_ln340_5_fu_853_p2;
wire   [9:0] select_ln340_10_fu_1259_p3;
wire   [9:0] select_ln388_5_fu_1267_p3;
wire   [0:0] xor_ln340_16_fu_896_p2;
wire   [9:0] tmp_16_fu_1283_p4;
wire   [0:0] and_ln786_6_fu_890_p2;
wire   [0:0] or_ln340_6_fu_908_p2;
wire   [9:0] select_ln340_12_fu_1293_p3;
wire   [9:0] select_ln388_6_fu_1301_p3;
wire   [0:0] xor_ln340_17_fu_951_p2;
wire   [9:0] tmp_17_fu_1317_p4;
wire   [0:0] and_ln786_7_fu_945_p2;
wire   [0:0] or_ln340_7_fu_963_p2;
wire   [9:0] select_ln340_14_fu_1327_p3;
wire   [9:0] select_ln388_7_fu_1335_p3;
wire   [0:0] xor_ln340_18_fu_1006_p2;
wire   [9:0] tmp_18_fu_1351_p4;
wire   [0:0] and_ln786_8_fu_1000_p2;
wire   [0:0] or_ln340_8_fu_1018_p2;
wire   [9:0] select_ln340_16_fu_1361_p3;
wire   [9:0] select_ln388_8_fu_1369_p3;
wire   [0:0] xor_ln340_19_fu_1061_p2;
wire   [9:0] tmp_19_fu_1385_p4;
wire   [0:0] and_ln786_9_fu_1055_p2;
wire   [0:0] or_ln340_9_fu_1073_p2;
wire   [9:0] select_ln340_18_fu_1395_p3;
wire   [9:0] select_ln388_9_fu_1403_p3;
wire  signed [18:0] lhs_V_fu_1503_p1;
wire  signed [18:0] rhs_V_fu_1506_p1;
wire   [18:0] ret_V_fu_1509_p2;
wire   [17:0] p_Val2_22_fu_1523_p2;
wire   [0:0] p_Result_18_fu_1527_p3;
wire   [0:0] p_Result_s_fu_1515_p3;
wire   [0:0] xor_ln786_10_fu_1535_p2;
wire   [0:0] xor_ln340_21_fu_1553_p2;
wire   [0:0] xor_ln340_20_fu_1547_p2;
wire   [0:0] underflow_fu_1541_p2;
wire   [0:0] or_ln340_10_fu_1559_p2;
wire   [17:0] select_ln340_20_fu_1565_p3;
wire   [17:0] select_ln388_10_fu_1573_p3;
wire   [17:0] p_Val2_24_fu_1592_p1;
wire   [17:0] p_Val2_23_fu_1589_p1;
wire   [17:0] p_Val2_25_fu_1595_p2;
wire   [0:0] p_Result_19_fu_1605_p3;
wire   [16:0] add_ln746_fu_1601_p2;
wire  signed [18:0] lhs_V_1_fu_1624_p1;
wire   [18:0] rhs_V_1_fu_1627_p1;
wire   [18:0] ret_V_1_fu_1630_p2;
wire   [17:0] zext_ln746_fu_1621_p1;
wire   [17:0] p_Val2_29_fu_1644_p2;
wire   [0:0] p_Result_21_fu_1649_p3;
wire   [0:0] p_Result_20_fu_1636_p3;
wire   [0:0] xor_ln786_11_fu_1657_p2;
wire   [0:0] xor_ln340_23_fu_1675_p2;
wire   [0:0] xor_ln340_22_fu_1669_p2;
wire   [9:0] tmp_20_fu_1687_p4;
wire   [0:0] underflow_1_fu_1663_p2;
wire   [0:0] or_ln340_11_fu_1681_p2;
wire   [9:0] select_ln340_22_fu_1697_p3;
wire   [9:0] select_ln388_11_fu_1705_p3;
reg    grp_fu_326_ce;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config12_s_exp_tabckv #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table3_address0),
    .ce0(exp_table3_ce0),
    .q0(exp_table3_q0)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config12_s_invert_clv #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table4_address0),
    .ce0(invert_table4_ce0),
    .q0(invert_table4_q0)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start),
    .ap_done(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_done),
    .ap_idle(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_idle),
    .ap_ready(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_ready),
    .x_0_V(exp_res_0_V_fu_130),
    .x_1_V(exp_res_1_V_fu_134),
    .x_2_V(exp_res_2_V_fu_138),
    .x_3_V(exp_res_3_V_fu_142),
    .x_4_V(exp_res_4_V_fu_146),
    .x_5_V(exp_res_5_V_fu_150),
    .x_6_V(exp_res_6_V_fu_154),
    .x_7_V(exp_res_7_V_fu_158),
    .x_8_V(exp_res_8_V_fu_162),
    .x_9_V(exp_res_9_V_fu_166),
    .x_V_offset(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_x_V_offset),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_ce)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U2425(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_326_p0),
    .din1(grp_fu_326_p1),
    .ce(grp_fu_326_ce),
    .dout(grp_fu_326_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_ready == 1'b1)) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_array_0_V_reg_1829 <= data_V_data_0_V_dout;
        data_array_1_V_reg_1836 <= data_V_data_1_V_dout;
        data_array_2_V_reg_1843 <= data_V_data_2_V_dout;
        data_array_3_V_reg_1850 <= data_V_data_3_V_dout;
        data_array_4_V_reg_1857 <= data_V_data_4_V_dout;
        data_array_5_V_reg_1864 <= data_V_data_5_V_dout;
        data_array_6_V_reg_1871 <= data_V_data_6_V_dout;
        data_array_7_V_reg_1878 <= data_V_data_7_V_dout;
        data_array_8_V_reg_1885 <= data_V_data_8_V_dout;
        data_array_9_V_reg_1892 <= data_V_data_9_V_dout;
        exp_res_3_V_1_reg_2035_pp0_iter2_reg <= exp_res_3_V_1_reg_2035;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_0_V_1_reg_2002 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        exp_res_0_V_1_reg_2002_pp0_iter1_reg <= exp_res_0_V_1_reg_2002;
        sext_ln241_reg_2146 <= sext_ln241_fu_1725_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_0_V_fu_130 <= exp_res_0_V_1_reg_2002;
        exp_res_1_V_fu_134 <= exp_res_1_V_1_reg_2013;
        exp_res_2_V_fu_138 <= exp_res_2_V_1_reg_2024;
        exp_res_3_V_fu_142 <= exp_res_3_V_1_reg_2035;
        exp_res_4_V_fu_146 <= exp_res_4_V_1_reg_2046;
        exp_res_5_V_fu_150 <= exp_res_5_V_1_reg_2057;
        exp_res_6_V_1_reg_2068 <= exp_table3_q0;
        exp_res_6_V_fu_154 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        exp_res_1_V_1_reg_2013 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        exp_res_1_V_1_reg_2013_pp0_iter1_reg <= exp_res_1_V_1_reg_2013;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_2_V_1_reg_2024 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        exp_res_2_V_1_reg_2024_pp0_iter1_reg <= exp_res_2_V_1_reg_2024;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_3_V_1_reg_2035 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_4_V_1_reg_2046 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_4_V_1_reg_2046_pp0_iter2_reg <= exp_res_4_V_1_reg_2046;
        icmp_ln1496_1_reg_1904 <= icmp_ln1496_1_fu_435_p2;
        icmp_ln1496_3_reg_1909 <= icmp_ln1496_3_fu_439_p2;
        icmp_ln1496_4_reg_1914 <= icmp_ln1496_4_fu_443_p2;
        icmp_ln1496_reg_1899 <= icmp_ln1496_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_5_V_1_reg_2057 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_5_V_1_reg_2057_pp0_iter2_reg <= exp_res_5_V_1_reg_2057;
        select_ln66_2_reg_1919 <= select_ln66_2_fu_463_p3;
        select_ln66_5_reg_1925 <= select_ln66_5_fu_487_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_6_V_1_reg_2068_pp0_iter2_reg <= exp_res_6_V_1_reg_2068;
        icmp_ln1496_7_reg_1937 <= icmp_ln1496_7_fu_505_p2;
        p_Val2_26_reg_2119 <= p_Val2_26_fu_1581_p3;
        p_Val2_27_reg_2125 <= p_Val2_27_fu_1613_p3;
        select_ln66_6_reg_1931 <= select_ln66_6_fu_499_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_res_7_V_1_reg_2078 <= exp_table3_q0;
        exp_res_7_V_fu_158 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_res_7_V_1_reg_2078_pp0_iter2_reg <= exp_res_7_V_1_reg_2078;
        x_max_V_reg_1942 <= x_max_V_fu_519_p3;
        y_V_10_reg_2131 <= y_V_10_fu_1713_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_res_8_V_1_reg_2088 <= exp_table3_q0;
        exp_res_8_V_fu_162 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_res_8_V_1_reg_2088_pp0_iter2_reg <= exp_res_8_V_1_reg_2088;
        y_V_1_reg_1952 <= y_V_1_fu_1139_p3;
        y_V_2_reg_1957 <= y_V_2_fu_1173_p3;
        y_V_3_reg_1962 <= y_V_3_fu_1207_p3;
        y_V_4_reg_1967 <= y_V_4_fu_1241_p3;
        y_V_5_reg_1972 <= y_V_5_fu_1275_p3;
        y_V_6_reg_1977 <= y_V_6_fu_1309_p3;
        y_V_7_reg_1982 <= y_V_7_fu_1343_p3;
        y_V_8_reg_1987 <= y_V_8_fu_1377_p3;
        y_V_9_reg_1992 <= y_V_9_fu_1411_p3;
        y_V_reg_1947 <= y_V_fu_1105_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        exp_res_9_V_1_reg_2100 <= exp_table3_q0;
        exp_res_9_V_fu_166 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        exp_res_9_V_1_reg_2100_pp0_iter2_reg <= exp_res_9_V_1_reg_2100;
        inv_exp_sum_V_reg_2141 <= invert_table4_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_Val2_19_reg_2107 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_Val2_1_reg_2113 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        tmp_data_0_V_reg_2156 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_1_V_reg_2166 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_2_V_reg_2176 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_data_3_V_reg_2186 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_data_4_V_reg_2196 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_data_5_V_reg_2206 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_data_6_V_reg_2216 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_data_7_V_reg_2226 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_data_8_V_reg_2236 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_data_9_V_reg_2246 <= {{grp_fu_326_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_table3_address0 = zext_ln225_9_fu_1494_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_table3_address0 = zext_ln225_8_fu_1485_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_table3_address0 = zext_ln225_7_fu_1476_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_table3_address0 = zext_ln225_6_fu_1443_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table3_address0 = zext_ln225_5_fu_1439_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_address0 = zext_ln225_4_fu_1435_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table3_address0 = zext_ln225_3_fu_1431_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        exp_table3_address0 = zext_ln225_2_fu_1427_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table3_address0 = zext_ln225_1_fu_1423_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table3_address0 = zext_ln225_fu_1419_p1;
    end else begin
        exp_table3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        exp_table3_ce0 = 1'b1;
    end else begin
        exp_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_fu_326_ce = 1'b1;
    end else begin
        grp_fu_326_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_326_p0 = zext_ln1118_9_fu_1765_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_326_p0 = zext_ln1118_8_fu_1761_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_326_p0 = zext_ln1118_7_fu_1757_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_326_p0 = zext_ln1118_6_fu_1753_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_326_p0 = zext_ln1118_5_fu_1749_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_326_p0 = zext_ln1118_4_fu_1745_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_326_p0 = zext_ln1118_3_fu_1741_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_326_p0 = zext_ln1118_2_fu_1737_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        grp_fu_326_p0 = zext_ln1118_1_fu_1733_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_326_p0 = zext_ln1118_fu_1729_p1;
    end else begin
        grp_fu_326_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)))) begin
        grp_fu_326_p1 = sext_ln241_reg_2146;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_326_p1 = sext_ln241_fu_1725_p1;
    end else begin
        grp_fu_326_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001_ignoreCallOp262) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage7_11001_ignoreCallOp260) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp265) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp263) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp264) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage8_11001_ignoreCallOp261) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_x_V_offset = 5'd4;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_x_V_offset = 5'd0;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_x_V_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        invert_table4_ce0 = 1'b1;
    end else begin
        invert_table4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_fu_1601_p2 = (exp_res_8_V_1_reg_2088 + exp_res_9_V_1_reg_2100);

assign and_ln786_1_fu_615_p2 = (xor_ln786_1_fu_609_p2 & tmp_23_fu_593_p3);

assign and_ln786_2_fu_670_p2 = (xor_ln786_2_fu_664_p2 & tmp_25_fu_648_p3);

assign and_ln786_3_fu_725_p2 = (xor_ln786_3_fu_719_p2 & tmp_27_fu_703_p3);

assign and_ln786_4_fu_780_p2 = (xor_ln786_4_fu_774_p2 & tmp_29_fu_758_p3);

assign and_ln786_5_fu_835_p2 = (xor_ln786_5_fu_829_p2 & tmp_31_fu_813_p3);

assign and_ln786_6_fu_890_p2 = (xor_ln786_6_fu_884_p2 & tmp_33_fu_868_p3);

assign and_ln786_7_fu_945_p2 = (xor_ln786_7_fu_939_p2 & tmp_35_fu_923_p3);

assign and_ln786_8_fu_1000_p2 = (xor_ln786_8_fu_994_p2 & tmp_37_fu_978_p3);

assign and_ln786_9_fu_1055_p2 = (xor_ln786_9_fu_1049_p2 & tmp_39_fu_1033_p3);

assign and_ln786_fu_560_p2 = (xor_ln786_fu_554_p2 & tmp_21_fu_538_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op50 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp263 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op50 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op50 == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_ignoreCallOp264 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_ignoreCallOp265 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001_ignoreCallOp260 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_01001 = ((io_acc_block_signal_op400 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((io_acc_block_signal_op400 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_11001_ignoreCallOp261 = ((io_acc_block_signal_op400 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((io_acc_block_signal_op400 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001_ignoreCallOp262 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage7_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage8_iter1_ignore_call233 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op50 == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call234 = ((io_acc_block_signal_op50 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state20_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage9_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage7_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage8_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage9_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage7_iter3_ignore_call233 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_pp0_stage8_iter3 = (io_acc_block_signal_op400 == 1'b0);
end

always @ (*) begin
    ap_block_state39_pp0_stage8_iter3_ignore_call233 = (io_acc_block_signal_op400 == 1'b0);
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start = grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_364_ap_start_reg;

assign icmp_ln1496_1_fu_435_p2 = (($signed(data_array_2_V_reg_1843) < $signed(data_array_3_V_reg_1850)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_457_p2 = (($signed(select_ln66_fu_447_p3) < $signed(select_ln66_1_fu_452_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_439_p2 = (($signed(data_array_4_V_reg_1857) < $signed(data_array_5_V_reg_1864)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_443_p2 = (($signed(data_array_6_V_reg_1871) < $signed(data_array_7_V_reg_1878)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_481_p2 = (($signed(select_ln66_3_fu_471_p3) < $signed(select_ln66_4_fu_476_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_495_p2 = (($signed(select_ln66_2_reg_1919) < $signed(select_ln66_5_reg_1925)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_505_p2 = (($signed(data_array_8_V_reg_1885) < $signed(data_array_9_V_reg_1892)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_514_p2 = (($signed(select_ln66_6_reg_1931) < $signed(select_ln66_7_fu_509_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_431_p2 = (($signed(data_array_0_V_reg_1829) < $signed(data_array_1_V_reg_1836)) ? 1'b1 : 1'b0);

assign invert_table4_address0 = zext_ln235_fu_1721_p1;

assign io_acc_block_signal_op400 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op50 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign lhs_V_1_fu_1624_p1 = p_Val2_26_reg_2119;

assign lhs_V_fu_1503_p1 = p_Val2_19_reg_2107;

assign or_ln340_10_fu_1559_p2 = (xor_ln340_21_fu_1553_p2 | p_Result_18_fu_1527_p3);

assign or_ln340_11_fu_1681_p2 = (xor_ln340_23_fu_1675_p2 | p_Result_21_fu_1649_p3);

assign or_ln340_1_fu_633_p2 = (xor_ln340_1_fu_627_p2 | tmp_24_fu_601_p3);

assign or_ln340_2_fu_688_p2 = (xor_ln340_2_fu_682_p2 | tmp_26_fu_656_p3);

assign or_ln340_3_fu_743_p2 = (xor_ln340_3_fu_737_p2 | tmp_28_fu_711_p3);

assign or_ln340_4_fu_798_p2 = (xor_ln340_4_fu_792_p2 | tmp_30_fu_766_p3);

assign or_ln340_5_fu_853_p2 = (xor_ln340_5_fu_847_p2 | tmp_32_fu_821_p3);

assign or_ln340_6_fu_908_p2 = (xor_ln340_6_fu_902_p2 | tmp_34_fu_876_p3);

assign or_ln340_7_fu_963_p2 = (xor_ln340_7_fu_957_p2 | tmp_36_fu_931_p3);

assign or_ln340_8_fu_1018_p2 = (xor_ln340_8_fu_1012_p2 | tmp_38_fu_986_p3);

assign or_ln340_9_fu_1073_p2 = (xor_ln340_9_fu_1067_p2 | tmp_40_fu_1041_p3);

assign or_ln340_fu_578_p2 = (xor_ln340_fu_572_p2 | tmp_22_fu_546_p3);

assign p_Result_18_fu_1527_p3 = p_Val2_22_fu_1523_p2[32'd17];

assign p_Result_19_fu_1605_p3 = p_Val2_25_fu_1595_p2[32'd17];

assign p_Result_20_fu_1636_p3 = ret_V_1_fu_1630_p2[32'd18];

assign p_Result_21_fu_1649_p3 = p_Val2_29_fu_1644_p2[32'd17];

assign p_Result_s_fu_1515_p3 = ret_V_fu_1509_p2[32'd18];

assign p_Val2_22_fu_1523_p2 = ($signed(p_Val2_1_reg_2113) + $signed(p_Val2_19_reg_2107));

assign p_Val2_23_fu_1589_p1 = exp_res_8_V_1_reg_2088;

assign p_Val2_24_fu_1592_p1 = exp_res_9_V_1_reg_2100;

assign p_Val2_25_fu_1595_p2 = (p_Val2_24_fu_1592_p1 + p_Val2_23_fu_1589_p1);

assign p_Val2_26_fu_1581_p3 = ((or_ln340_10_fu_1559_p2[0:0] === 1'b1) ? select_ln340_20_fu_1565_p3 : select_ln388_10_fu_1573_p3);

assign p_Val2_27_fu_1613_p3 = ((p_Result_19_fu_1605_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_1601_p2);

assign p_Val2_29_fu_1644_p2 = ($signed(zext_ln746_fu_1621_p1) + $signed(p_Val2_26_reg_2119));

assign res_V_data_0_V_din = tmp_data_0_V_reg_2156;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2166;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2176;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2186;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2196;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2206;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2216;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2226;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2236;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2246;

assign ret_V_1_fu_1630_p2 = ($signed(lhs_V_1_fu_1624_p1) + $signed(rhs_V_1_fu_1627_p1));

assign ret_V_fu_1509_p2 = ($signed(lhs_V_fu_1503_p1) + $signed(rhs_V_fu_1506_p1));

assign rhs_V_1_fu_1627_p1 = p_Val2_27_reg_2125;

assign rhs_V_fu_1506_p1 = p_Val2_1_reg_2113;

assign select_ln340_10_fu_1259_p3 = ((xor_ln340_15_fu_841_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1249_p4);

assign select_ln340_12_fu_1293_p3 = ((xor_ln340_16_fu_896_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1283_p4);

assign select_ln340_14_fu_1327_p3 = ((xor_ln340_17_fu_951_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1317_p4);

assign select_ln340_16_fu_1361_p3 = ((xor_ln340_18_fu_1006_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1351_p4);

assign select_ln340_18_fu_1395_p3 = ((xor_ln340_19_fu_1061_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1385_p4);

assign select_ln340_20_fu_1565_p3 = ((xor_ln340_20_fu_1547_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_22_fu_1523_p2);

assign select_ln340_22_fu_1697_p3 = ((xor_ln340_22_fu_1669_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1687_p4);

assign select_ln340_2_fu_1123_p3 = ((xor_ln340_11_fu_621_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1113_p4);

assign select_ln340_4_fu_1157_p3 = ((xor_ln340_12_fu_676_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1147_p4);

assign select_ln340_6_fu_1191_p3 = ((xor_ln340_13_fu_731_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1181_p4);

assign select_ln340_8_fu_1225_p3 = ((xor_ln340_14_fu_786_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1215_p4);

assign select_ln340_fu_1089_p3 = ((xor_ln340_10_fu_566_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_1079_p4);

assign select_ln388_10_fu_1573_p3 = ((underflow_fu_1541_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_22_fu_1523_p2);

assign select_ln388_11_fu_1705_p3 = ((underflow_1_fu_1663_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1687_p4);

assign select_ln388_1_fu_1131_p3 = ((and_ln786_1_fu_615_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1113_p4);

assign select_ln388_2_fu_1165_p3 = ((and_ln786_2_fu_670_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1147_p4);

assign select_ln388_3_fu_1199_p3 = ((and_ln786_3_fu_725_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1181_p4);

assign select_ln388_4_fu_1233_p3 = ((and_ln786_4_fu_780_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1215_p4);

assign select_ln388_5_fu_1267_p3 = ((and_ln786_5_fu_835_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1249_p4);

assign select_ln388_6_fu_1301_p3 = ((and_ln786_6_fu_890_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1283_p4);

assign select_ln388_7_fu_1335_p3 = ((and_ln786_7_fu_945_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1317_p4);

assign select_ln388_8_fu_1369_p3 = ((and_ln786_8_fu_1000_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1351_p4);

assign select_ln388_9_fu_1403_p3 = ((and_ln786_9_fu_1055_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1385_p4);

assign select_ln388_fu_1097_p3 = ((and_ln786_fu_560_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_1079_p4);

assign select_ln66_1_fu_452_p3 = ((icmp_ln1496_1_reg_1904[0:0] === 1'b1) ? data_array_3_V_reg_1850 : data_array_2_V_reg_1843);

assign select_ln66_2_fu_463_p3 = ((icmp_ln1496_2_fu_457_p2[0:0] === 1'b1) ? select_ln66_1_fu_452_p3 : select_ln66_fu_447_p3);

assign select_ln66_3_fu_471_p3 = ((icmp_ln1496_3_reg_1909[0:0] === 1'b1) ? data_array_5_V_reg_1864 : data_array_4_V_reg_1857);

assign select_ln66_4_fu_476_p3 = ((icmp_ln1496_4_reg_1914[0:0] === 1'b1) ? data_array_7_V_reg_1878 : data_array_6_V_reg_1871);

assign select_ln66_5_fu_487_p3 = ((icmp_ln1496_5_fu_481_p2[0:0] === 1'b1) ? select_ln66_4_fu_476_p3 : select_ln66_3_fu_471_p3);

assign select_ln66_6_fu_499_p3 = ((icmp_ln1496_6_fu_495_p2[0:0] === 1'b1) ? select_ln66_5_reg_1925 : select_ln66_2_reg_1919);

assign select_ln66_7_fu_509_p3 = ((icmp_ln1496_7_reg_1937[0:0] === 1'b1) ? data_array_9_V_reg_1892 : data_array_8_V_reg_1885);

assign select_ln66_fu_447_p3 = ((icmp_ln1496_reg_1899[0:0] === 1'b1) ? data_array_1_V_reg_1836 : data_array_0_V_reg_1829);

assign sext_ln241_fu_1725_p1 = $signed(inv_exp_sum_V_reg_2141);

assign sext_ln703_10_fu_1024_p1 = data_array_9_V_reg_1892;

assign sext_ln703_1_fu_529_p1 = $signed(x_max_V_reg_1942);

assign sext_ln703_2_fu_584_p1 = data_array_1_V_reg_1836;

assign sext_ln703_3_fu_639_p1 = data_array_2_V_reg_1843;

assign sext_ln703_4_fu_694_p1 = data_array_3_V_reg_1850;

assign sext_ln703_5_fu_749_p1 = data_array_4_V_reg_1857;

assign sext_ln703_6_fu_804_p1 = data_array_5_V_reg_1864;

assign sext_ln703_7_fu_859_p1 = data_array_6_V_reg_1871;

assign sext_ln703_8_fu_914_p1 = data_array_7_V_reg_1878;

assign sext_ln703_9_fu_969_p1 = data_array_8_V_reg_1885;

assign sext_ln703_fu_526_p1 = data_array_0_V_reg_1829;

assign sub_ln1193_1_fu_587_p2 = ($signed(sext_ln703_2_fu_584_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_2_fu_642_p2 = ($signed(sext_ln703_3_fu_639_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_3_fu_697_p2 = ($signed(sext_ln703_4_fu_694_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_4_fu_752_p2 = ($signed(sext_ln703_5_fu_749_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_5_fu_807_p2 = ($signed(sext_ln703_6_fu_804_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_6_fu_862_p2 = ($signed(sext_ln703_7_fu_859_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_7_fu_917_p2 = ($signed(sext_ln703_8_fu_914_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_8_fu_972_p2 = ($signed(sext_ln703_9_fu_969_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_9_fu_1027_p2 = ($signed(sext_ln703_10_fu_1024_p1) - $signed(sext_ln703_1_fu_529_p1));

assign sub_ln1193_fu_532_p2 = ($signed(sext_ln703_fu_526_p1) - $signed(sext_ln703_1_fu_529_p1));

assign tmp_11_fu_1113_p4 = {{sub_ln1193_1_fu_587_p2[13:4]}};

assign tmp_12_fu_1147_p4 = {{sub_ln1193_2_fu_642_p2[13:4]}};

assign tmp_13_fu_1181_p4 = {{sub_ln1193_3_fu_697_p2[13:4]}};

assign tmp_14_fu_1215_p4 = {{sub_ln1193_4_fu_752_p2[13:4]}};

assign tmp_15_fu_1249_p4 = {{sub_ln1193_5_fu_807_p2[13:4]}};

assign tmp_16_fu_1283_p4 = {{sub_ln1193_6_fu_862_p2[13:4]}};

assign tmp_17_fu_1317_p4 = {{sub_ln1193_7_fu_917_p2[13:4]}};

assign tmp_18_fu_1351_p4 = {{sub_ln1193_8_fu_972_p2[13:4]}};

assign tmp_19_fu_1385_p4 = {{sub_ln1193_9_fu_1027_p2[13:4]}};

assign tmp_20_fu_1687_p4 = {{p_Val2_29_fu_1644_p2[17:8]}};

assign tmp_21_fu_538_p3 = sub_ln1193_fu_532_p2[32'd14];

assign tmp_22_fu_546_p3 = sub_ln1193_fu_532_p2[32'd13];

assign tmp_23_fu_593_p3 = sub_ln1193_1_fu_587_p2[32'd14];

assign tmp_24_fu_601_p3 = sub_ln1193_1_fu_587_p2[32'd13];

assign tmp_25_fu_648_p3 = sub_ln1193_2_fu_642_p2[32'd14];

assign tmp_26_fu_656_p3 = sub_ln1193_2_fu_642_p2[32'd13];

assign tmp_27_fu_703_p3 = sub_ln1193_3_fu_697_p2[32'd14];

assign tmp_28_fu_711_p3 = sub_ln1193_3_fu_697_p2[32'd13];

assign tmp_29_fu_758_p3 = sub_ln1193_4_fu_752_p2[32'd14];

assign tmp_30_fu_766_p3 = sub_ln1193_4_fu_752_p2[32'd13];

assign tmp_31_fu_813_p3 = sub_ln1193_5_fu_807_p2[32'd14];

assign tmp_32_fu_821_p3 = sub_ln1193_5_fu_807_p2[32'd13];

assign tmp_33_fu_868_p3 = sub_ln1193_6_fu_862_p2[32'd14];

assign tmp_34_fu_876_p3 = sub_ln1193_6_fu_862_p2[32'd13];

assign tmp_35_fu_923_p3 = sub_ln1193_7_fu_917_p2[32'd14];

assign tmp_36_fu_931_p3 = sub_ln1193_7_fu_917_p2[32'd13];

assign tmp_37_fu_978_p3 = sub_ln1193_8_fu_972_p2[32'd14];

assign tmp_38_fu_986_p3 = sub_ln1193_8_fu_972_p2[32'd13];

assign tmp_39_fu_1033_p3 = sub_ln1193_9_fu_1027_p2[32'd14];

assign tmp_40_fu_1041_p3 = sub_ln1193_9_fu_1027_p2[32'd13];

assign tmp_fu_1079_p4 = {{sub_ln1193_fu_532_p2[13:4]}};

assign underflow_1_fu_1663_p2 = (xor_ln786_11_fu_1657_p2 & p_Result_20_fu_1636_p3);

assign underflow_fu_1541_p2 = (xor_ln786_10_fu_1535_p2 & p_Result_s_fu_1515_p3);

assign x_max_V_fu_519_p3 = ((icmp_ln1496_8_fu_514_p2[0:0] === 1'b1) ? select_ln66_7_fu_509_p3 : select_ln66_6_reg_1931);

assign xor_ln340_10_fu_566_p2 = (tmp_22_fu_546_p3 ^ tmp_21_fu_538_p3);

assign xor_ln340_11_fu_621_p2 = (tmp_24_fu_601_p3 ^ tmp_23_fu_593_p3);

assign xor_ln340_12_fu_676_p2 = (tmp_26_fu_656_p3 ^ tmp_25_fu_648_p3);

assign xor_ln340_13_fu_731_p2 = (tmp_28_fu_711_p3 ^ tmp_27_fu_703_p3);

assign xor_ln340_14_fu_786_p2 = (tmp_30_fu_766_p3 ^ tmp_29_fu_758_p3);

assign xor_ln340_15_fu_841_p2 = (tmp_32_fu_821_p3 ^ tmp_31_fu_813_p3);

assign xor_ln340_16_fu_896_p2 = (tmp_34_fu_876_p3 ^ tmp_33_fu_868_p3);

assign xor_ln340_17_fu_951_p2 = (tmp_36_fu_931_p3 ^ tmp_35_fu_923_p3);

assign xor_ln340_18_fu_1006_p2 = (tmp_38_fu_986_p3 ^ tmp_37_fu_978_p3);

assign xor_ln340_19_fu_1061_p2 = (tmp_40_fu_1041_p3 ^ tmp_39_fu_1033_p3);

assign xor_ln340_1_fu_627_p2 = (tmp_23_fu_593_p3 ^ 1'd1);

assign xor_ln340_20_fu_1547_p2 = (p_Result_s_fu_1515_p3 ^ p_Result_18_fu_1527_p3);

assign xor_ln340_21_fu_1553_p2 = (p_Result_s_fu_1515_p3 ^ 1'd1);

assign xor_ln340_22_fu_1669_p2 = (p_Result_21_fu_1649_p3 ^ p_Result_20_fu_1636_p3);

assign xor_ln340_23_fu_1675_p2 = (p_Result_20_fu_1636_p3 ^ 1'd1);

assign xor_ln340_2_fu_682_p2 = (tmp_25_fu_648_p3 ^ 1'd1);

assign xor_ln340_3_fu_737_p2 = (tmp_27_fu_703_p3 ^ 1'd1);

assign xor_ln340_4_fu_792_p2 = (tmp_29_fu_758_p3 ^ 1'd1);

assign xor_ln340_5_fu_847_p2 = (tmp_31_fu_813_p3 ^ 1'd1);

assign xor_ln340_6_fu_902_p2 = (tmp_33_fu_868_p3 ^ 1'd1);

assign xor_ln340_7_fu_957_p2 = (tmp_35_fu_923_p3 ^ 1'd1);

assign xor_ln340_8_fu_1012_p2 = (tmp_37_fu_978_p3 ^ 1'd1);

assign xor_ln340_9_fu_1067_p2 = (tmp_39_fu_1033_p3 ^ 1'd1);

assign xor_ln340_fu_572_p2 = (tmp_21_fu_538_p3 ^ 1'd1);

assign xor_ln786_10_fu_1535_p2 = (p_Result_18_fu_1527_p3 ^ 1'd1);

assign xor_ln786_11_fu_1657_p2 = (p_Result_21_fu_1649_p3 ^ 1'd1);

assign xor_ln786_1_fu_609_p2 = (tmp_24_fu_601_p3 ^ 1'd1);

assign xor_ln786_2_fu_664_p2 = (tmp_26_fu_656_p3 ^ 1'd1);

assign xor_ln786_3_fu_719_p2 = (tmp_28_fu_711_p3 ^ 1'd1);

assign xor_ln786_4_fu_774_p2 = (tmp_30_fu_766_p3 ^ 1'd1);

assign xor_ln786_5_fu_829_p2 = (tmp_32_fu_821_p3 ^ 1'd1);

assign xor_ln786_6_fu_884_p2 = (tmp_34_fu_876_p3 ^ 1'd1);

assign xor_ln786_7_fu_939_p2 = (tmp_36_fu_931_p3 ^ 1'd1);

assign xor_ln786_8_fu_994_p2 = (tmp_38_fu_986_p3 ^ 1'd1);

assign xor_ln786_9_fu_1049_p2 = (tmp_40_fu_1041_p3 ^ 1'd1);

assign xor_ln786_fu_554_p2 = (tmp_22_fu_546_p3 ^ 1'd1);

assign y_V_10_fu_1713_p3 = ((or_ln340_11_fu_1681_p2[0:0] === 1'b1) ? select_ln340_22_fu_1697_p3 : select_ln388_11_fu_1705_p3);

assign y_V_1_fu_1139_p3 = ((or_ln340_1_fu_633_p2[0:0] === 1'b1) ? select_ln340_2_fu_1123_p3 : select_ln388_1_fu_1131_p3);

assign y_V_2_fu_1173_p3 = ((or_ln340_2_fu_688_p2[0:0] === 1'b1) ? select_ln340_4_fu_1157_p3 : select_ln388_2_fu_1165_p3);

assign y_V_3_fu_1207_p3 = ((or_ln340_3_fu_743_p2[0:0] === 1'b1) ? select_ln340_6_fu_1191_p3 : select_ln388_3_fu_1199_p3);

assign y_V_4_fu_1241_p3 = ((or_ln340_4_fu_798_p2[0:0] === 1'b1) ? select_ln340_8_fu_1225_p3 : select_ln388_4_fu_1233_p3);

assign y_V_5_fu_1275_p3 = ((or_ln340_5_fu_853_p2[0:0] === 1'b1) ? select_ln340_10_fu_1259_p3 : select_ln388_5_fu_1267_p3);

assign y_V_6_fu_1309_p3 = ((or_ln340_6_fu_908_p2[0:0] === 1'b1) ? select_ln340_12_fu_1293_p3 : select_ln388_6_fu_1301_p3);

assign y_V_7_fu_1343_p3 = ((or_ln340_7_fu_963_p2[0:0] === 1'b1) ? select_ln340_14_fu_1327_p3 : select_ln388_7_fu_1335_p3);

assign y_V_8_fu_1377_p3 = ((or_ln340_8_fu_1018_p2[0:0] === 1'b1) ? select_ln340_16_fu_1361_p3 : select_ln388_8_fu_1369_p3);

assign y_V_9_fu_1411_p3 = ((or_ln340_9_fu_1073_p2[0:0] === 1'b1) ? select_ln340_18_fu_1395_p3 : select_ln388_9_fu_1403_p3);

assign y_V_fu_1105_p3 = ((or_ln340_fu_578_p2[0:0] === 1'b1) ? select_ln340_fu_1089_p3 : select_ln388_fu_1097_p3);

assign zext_ln1118_1_fu_1733_p1 = exp_res_1_V_1_reg_2013_pp0_iter1_reg;

assign zext_ln1118_2_fu_1737_p1 = exp_res_2_V_1_reg_2024_pp0_iter1_reg;

assign zext_ln1118_3_fu_1741_p1 = exp_res_3_V_1_reg_2035_pp0_iter2_reg;

assign zext_ln1118_4_fu_1745_p1 = exp_res_4_V_1_reg_2046_pp0_iter2_reg;

assign zext_ln1118_5_fu_1749_p1 = exp_res_5_V_1_reg_2057_pp0_iter2_reg;

assign zext_ln1118_6_fu_1753_p1 = exp_res_6_V_1_reg_2068_pp0_iter2_reg;

assign zext_ln1118_7_fu_1757_p1 = exp_res_7_V_1_reg_2078_pp0_iter2_reg;

assign zext_ln1118_8_fu_1761_p1 = exp_res_8_V_1_reg_2088_pp0_iter2_reg;

assign zext_ln1118_9_fu_1765_p1 = exp_res_9_V_1_reg_2100_pp0_iter2_reg;

assign zext_ln1118_fu_1729_p1 = exp_res_0_V_1_reg_2002_pp0_iter1_reg;

assign zext_ln225_1_fu_1423_p1 = y_V_1_reg_1952;

assign zext_ln225_2_fu_1427_p1 = y_V_2_reg_1957;

assign zext_ln225_3_fu_1431_p1 = y_V_3_reg_1962;

assign zext_ln225_4_fu_1435_p1 = y_V_4_reg_1967;

assign zext_ln225_5_fu_1439_p1 = y_V_5_reg_1972;

assign zext_ln225_6_fu_1443_p1 = y_V_6_reg_1977;

assign zext_ln225_7_fu_1476_p1 = y_V_7_reg_1982;

assign zext_ln225_8_fu_1485_p1 = y_V_8_reg_1987;

assign zext_ln225_9_fu_1494_p1 = y_V_9_reg_1992;

assign zext_ln225_fu_1419_p1 = y_V_reg_1947;

assign zext_ln235_fu_1721_p1 = y_V_10_reg_2131;

assign zext_ln746_fu_1621_p1 = p_Val2_27_reg_2125;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config12_s
